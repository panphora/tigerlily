{"version":3,"file":"tigerlily.module.js","sources":["../node_modules/floodplains/dist/floodplains.module.js","../node_modules/lodash.isplainobject/index.js","../src/tigerlily.js","../node_modules/deep-for-each/es/index.js"],"sourcesContent":["function r(r,t){(null==t||t>r.length)&&(t=r.length);for(var e=0,n=new Array(t);e<t;e++)n[e]=r[e];return n}function t(t,e){var n;if(\"undefined\"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(n=function(t,e){if(t){if(\"string\"==typeof t)return r(t,void 0);var n=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===n&&t.constructor&&(n=t.constructor.name),\"Map\"===n||\"Set\"===n?Array.from(t):\"Arguments\"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(t,void 0):void 0}}(t))||e&&t&&\"number\"==typeof t.length){n&&(t=n);var o=0;return function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}return(n=t[Symbol.iterator]()).next.bind(n)}var e={},n={emit:function(r,n){for(var o,a=t(e[r]||[]);!(o=a()).done;)(0,o.value)({name:r,value:n})},on:function(r,n){for(var o,a=t(Array.isArray(r)?r:[r]);!(o=a()).done;){var i=o.value;e[i]||(e[i]=[]),e[i].push(n)}}};export default n;\n//# sourceMappingURL=floodplains.module.js.map\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) ||\n      objectToString.call(value) != objectTag || isHostObject(value)) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return (typeof Ctor == 'function' &&\n    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n}\n\nmodule.exports = isPlainObject;\n","/*\n\n// uses existing db if present\nlet db = new tigerlily(\"jMpHXDYguqtS\", {\n  defaults: {\n    x: 123\n  }\n}); \n\ndb.x = \"hello\";\n// page reload\ndb.x === \"hello\"; // true\n\ndb.num = 0;\ndb.num++;\n\n\ndb.on(\"num\", ({name, oldValue, newValue}) => {\n  console.log({name, oldValue, newValue});\n});\n\ndb.on([\"x\", \"num\"], ({name, oldValue, newValue}) => {\n  console.log({name, oldValue, newValue});\n});\n\n*/\n\nimport floodplains from \"floodplains\";\nimport deepForEach from 'deep-for-each';\n\nfunction tigerlily (dbName, options = {}) {\n  if (typeof dbName !== \"string\") {\n    throw new Error('tigerlily requires a database name');\n  }\n\n  // get default options\n  const { defaults = {} } = options;\n\n  // get initial db state\n  let state = JSON.parse(localStorage.getItem(dbName) || \"{}\");\n\n  // assign defaults as starting data (don't overwrite existing data)\n  state = Object.assign(defaults, state);\n\n  function boundHandler (rootRef) {\n    return {\n      get (obj, prop) {\n        if (typeof obj[prop] === 'object' && obj[prop] !== null) {\n          // if nested object, wrap it in a Proxy\n          return new Proxy(obj[prop], boundHandler(rootRef));\n        } else {\n          return obj[prop];\n        }\n      },\n      set (obj, prop, value) {\n        let oldValue = obj[prop];\n        obj[prop] = value;\n        localStorage.setItem(dbName, JSON.stringify(rootRef));\n\n        let path = getPathOfNestedObject(rootRef, value) || prop;\n        floodplains.emit(path, {prop, path, oldValue, value});\n\n        return true;\n      }\n    }\n  }\n\n  let proxiedObject = new Proxy(state, boundHandler(state));\n\n  return proxiedObject;\n\n}\n\ntigerlily.on = floodplains.on;\n\nfunction getPathOfNestedObject (root, nested) {\n  if (root === nested) {\n    return \"\";\n  }\n\n  let objPath = \"\";\n  deepForEach(root, (value, key, subject, path) => {\n    if (value === nested) {\n      objPath = path;\n    }\n  });\n  return objPath;\n}\n\nexport default tigerlily;\n\n\n","import isPlainObject from 'lodash.isplainobject';\n\nfunction forEachObject(obj, fn, path) {\n  for (const key in obj) {\n    const deepPath = path ? `${path}.${key}` : key; // Note that we always use obj[key] because it might be mutated by forEach\n\n    fn.call(obj, obj[key], key, obj, deepPath);\n    forEach(obj[key], fn, deepPath);\n  }\n}\n\nfunction forEachArray(array, fn, path) {\n  array.forEach((value, index, arr) => {\n    const deepPath = `${path}[${index}]`;\n    fn.call(arr, value, index, arr, deepPath); // Note that we use arr[index] because it might be mutated by forEach\n\n    forEach(arr[index], fn, deepPath);\n  });\n}\n\nfunction forEach(value, fn, path) {\n  path = path || '';\n\n  if (Array.isArray(value)) {\n    forEachArray(value, fn, path);\n  } else if (isPlainObject(value)) {\n    forEachObject(value, fn, path);\n  }\n}\n\nexport default forEach;"],"names":["r","t","length","e","n","Array","Symbol","iterator","isArray","Object","prototype","toString","call","slice","constructor","name","from","test","o","done","value","TypeError","next","bind","func","transform","objectProto","funcToString","Function","hasOwnProperty","objectCtorString","objectToString","getPrototype","getPrototypeOf","arg","tigerlily","dbName","options","Error","defaults","state","JSON","parse","localStorage","getItem","assign","Proxy","boundHandler","rootRef","get","obj","prop","set","oldValue","setItem","stringify","path","root","nested","objPath","forEach","fn","array","index","arr","deepPath","forEachArray","isObjectLike","result","isHostObject","proto","Ctor","isPlainObject","key","forEachObject","deepForEach","subject","getPathOfNestedObject","a","floodplains","on","i","push"],"mappings":"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"}